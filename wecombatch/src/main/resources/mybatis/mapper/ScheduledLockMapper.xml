<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tech.wedev.wecombatch.dao.ScheduledLockMapper">
    <resultMap id="BaseResultMap" type="tech.wedev.wecombatch.entity.po.ScheduledLock">
        <result column="lock_name" jdbcType="VARCHAR" property="lockName"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="modify_time" jdbcType="TIMESTAMP" property="modifyTime"/>
    </resultMap>
    <sql id="Base_Column_List">
        lock_name, create_time, modify_time
    </sql>

    <insert id="insertLock" parameterType="java.lang.String">
        insert into db_scheduled_lock (lock_name, create_time, modify_time)
        values (#{lockName}, #{currentDate}, #{currentDate})
    </insert>

    <delete id="deleteLock">
        delete from db_scheduled_lock
        where lock_name = #{lockName}
    </delete>

    <update id="updateScheduledLock">
        update db_scheduled_lock
        set lock_name = #{newLockName},
            create_time = #{currentDate},
            modify_time = #{currentDate},
            where lock_name = #{oldLockName}
    </update>

    <select id="queryScheduledLock" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from db_scheduled_lock
        where 1=1
        <if test="lockName != null and lockName != ''">
            and lock_name = #{lockName}
        </if>
    </select>

    <select id="count"  resultType="java.lang.Integer">
        select count(lock_name) from db_scheduled_lock where lock_name = #{lockName};
    </select>

    <insert id="insert" parameterType="tech.wedev.wecombatch.entity.po.ScheduledLock">
        insert into db_scheduled_lock (lock_name, create_time, modify_time)
        values (#{lockName, jdbcType=VARCHAR}, #{createTime, jdbcType=TIMESTAMP}, #{modifyTime, jdbcType=TIMESTAMP})
    </insert>

    <delete id="deleteLockByCreateTime">
        delete from db_scheduled_lock
               where TIMESTAMPDIFF(SECOND, create_time, #{currentDate}) &gt; (60*60*12)
    </delete>
</mapper>
